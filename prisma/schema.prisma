generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql" // Changed from mysql to postgresql
  relationMode = "prisma"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

model PensionPlan {
  // Basic Information
  id           String   @id @default(cuid())
  name         String
  type         PlanType
  description  String?
  jurisdiction String // Federal/Provincial/Municipal
  sector       String // Public/Private/Healthcare/Education

  // Core Plan Details
  accrualRate        Float? // For DB plans
  employerMatch      Float? // For DC plans
  vestingPeriodYears Int?
  cppIntegration     Boolean @default(true)

  // Retirement Rules
  retirementAge      Int
  earlyRetirementAge Int?
  bridgeBenefit      Boolean @default(false)

  // Plan Statistics
  membershipSize    Int? // Number of members
  fundSize          Float? // AUM in dollars
  fundingStatus     Float? // Funding ratio
  investmentOptions String[] // For DC plans

  // Contact & Reference Information
  websiteUrl  String?
  contactInfo String?
  sources     String[] // Reference citations

  // Metadata
  lastUpdated DateTime // Data verification date
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  PlanComparison    PlanComparison?    @relation(fields: [planComparisonId], references: [id])
  planComparisonId  String?
  savedCalculations SavedCalculation[]

  @@index([planComparisonId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Remove @db.Text
  access_token      String? // Remove @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // Remove @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum PlanType {
  DEFINED_BENEFIT
  DEFINED_CONTRIBUTION
  GROUP_RRSP
  CPP
  OAS
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  savedCalculations SavedCalculation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PlanComparison {
  id     String @id @default(cuid())
  userId String
  name   String

  // Input parameters
  currentAge     Int
  retirementAge  Int
  currentSalary  Float
  yearsOfService Int

  // Assumptions
  salaryGrowth     Float @default(0.02)
  inflationRate    Float @default(0.02)
  investmentReturn Float @default(0.06)

  // Relations
  plans PensionPlan[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedCalculation {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Input parameters
  currentAge     Int
  retirementAge  Int
  currentSalary  Float
  yearsOfService Int

  // Assumptions
  salaryGrowth     Float @default(0.02)
  inflationRate    Float @default(0.02)
  investmentReturn Float @default(0.06)

  // Results
  monthlyBenefit   Float
  yearlyBenefit    Float
  replacementRatio Float

  // Relations
  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  plans PensionPlan[]

  @@index([userId])
}
