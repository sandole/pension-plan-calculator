generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum PlanType {
  DEFINED_BENEFIT
  DEFINED_CONTRIBUTION
  GROUP_RRSP
  CPP
  OAS
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PensionPlan {
  id          String   @id @default(cuid())
  name        String
  type        PlanType
  description String?
  
  // Plan details
  accrualRate         Float?    // For defined benefit
  employerMatch       Float?    // For defined contribution
  vestingPeriodYears  Int?
  
  // Plan rules
  retirementAge       Int
  earlyRetirementAge  Int?
  bridgeBenefit      Boolean   @default(false)
  
  // Integration details
  cppIntegration     Boolean   @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  comparisons     PlanComparison[]
}

model PlanComparison {
  id        String   @id @default(cuid())
  userId    String
  name      String
  
  // Input parameters
  currentAge        Int
  retirementAge     Int
  currentSalary     Float
  yearsOfService    Int
  
  // Assumptions
  salaryGrowth      Float @default(0.02)
  inflationRate     Float @default(0.02)
  investmentReturn  Float @default(0.06)
  
  // Relations
  plans      PensionPlan[]
  
  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}